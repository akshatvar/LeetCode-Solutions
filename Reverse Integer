/*Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
 

Constraints:

-231 <= x <= 231 - 1*/

#Solution
Intuition
we create a double variable ans to store the value if ans goes out of the range we simpily return 0

Approach
Here's an explanation of the approach used in the provided reverse function:

The function takes an integer x as input and aims to reverse its digits.

The function first checks if the input x is greater than the maximum value of the int data type (INT_MAX). If it is, then reversing the digits would result in an overflow, so the function returns 0.

Next, the function checks if the input x is less than or equal to the minimum value of the int data type (INT_MIN). If it is, then reversing the digits would also result in an overflow, so the function returns 0.

If the input x is within the valid range, the function proceeds to reverse its digits.

The function initializes a variable ans as a double to store the reversed number. It also keeps a copy of the original input in the variable temp.

If the input x is negative, the function converts it to a positive number by multiplying it by -1. This step allows us to work with the positive number while keeping track of the sign separately.

The function enters a while loop that continues until x becomes 0. In each iteration, it performs the following steps:

Calculates the last digit of x by taking the modulus of x with 10 (i.e., y = x % 10).
Updates the reversed number ans by multiplying it by 10 and adding the last digit y (i.e., ans = ans * 10 + y).
Divides x by 10 to remove the last digit (i.e., x = x / 10).
After the while loop completes, the reversed number ans is converted back to an integer a by explicitly casting it.

If the original input temp was negative, the function returns the reversed number a with the negative sign. Otherwise, it returns a.

The approach essentially reverses the digits of the input number by repeatedly extracting the last digit, updating the reversed number, and removing the last digit until all digits have been processed.

Complexity
Time complexity:
The time complexity of the provided reverse function can be analyzed as follows:

The function uses a while loop to reverse the digits of the input number x. The number of iterations in the loop depends on the number of digits in x.

Let's denote the number of digits in x as d. In the worst case, the loop will iterate d times to reverse all the digits.

Inside the loop, there are constant time operations such as modulus (%), division (/), and basic arithmetic operations (+, *).

Therefore, the time complexity of the reverse function can be approximated as O(d), where d is the number of digits in x.

Space complexity:

The space complexity of the provided reverse function can be analyzed as follows:

The function uses a constant amount of additional space for variables such as ans, temp, and y. These variables do not depend on the input size.
Hence, the space complexity of the reverse function is O(1), which means it requires a constant amount of space regardless of the input size.
It's worth noting that the function also includes some conditional checks for integer overflow, but these checks do not affect the overall time or space complexity analysis, as they are constant time operations.

Code
#include <limits.h>
class Solution {
public:
    int reverse(int x) {
        if(x>=INT_MAX){
            return 0;
        }
        if(x<=INT_MIN){
            return 0;
        }
        double ans = 0;
        int temp = x;
        if(x<0){
            x = -1*x;
        }
        while(x>0){
            int y = x%10;
            if(ans*10>INT_MAX){
                return 0;
            }
            ans = ans*10 + y;
            x = x/10;
        }
        int a = int(ans);
        if(temp<0){
            return -1*a;
        }
        return a;
    }
};
