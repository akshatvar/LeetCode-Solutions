/*Given a string s, return the longest 
palindromic
 
substring
 in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.*/

//Solution

class Solution {
public:
    string longestPalindrome(string s) {
        if(s.size()<=1) return s;
        int max_length = 1;
        int n = s.size();
        int start = 0,end = 0;
        
        for(int i=0;i<n;i++){
            int left = i;
            int right = i;
            while(left>=0 && right<n){
                if(s[left]==s[right]){
                    left--;
                    right++;
                }else{
                    break;
                }
            }
            int len = right-left-1;
            if(len>max_length){
                max_length = len;
                start = left+1;
                end = right-1;
            }
        }
         for(int i=0;i<n;i++){
            int left = i;
            int right = i+1;
            while(left>=0 && right<n){
                if(s[left]==s[right]){
                    left--;
                    right++;
                }else{
                    break;
                }
            }
            int len = right-left-1;
            if(len>max_length){
                max_length = len;
                start = left+1;
                end = right-1;
            }
        }
        return s.substr(start,max_length);
    }
};
