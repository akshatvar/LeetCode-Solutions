/*The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

P   A   H   N
A P L S I I G
Y   I   R
And then read line by line: "PAHNAPLSIIGYIR"

Write the code that will take a string and make this conversion given a number of rows:

string convert(string s, int numRows);
 

Example 1:

Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"
Example 2:

Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"
Explanation:
P     I    N
A   L S  I G
Y A   H R
P     I
Example 3:

Input: s = "A", numRows = 1
Output: "A"
 

Constraints:

1 <= s.length <= 1000
s consists of English letters (lower-case and upper-case), ',' and '.'.
1 <= numRows <= 1000
*/
Intuition
The main idea is to efficiently traverse the input string s and form the ZigZag pattern by skipping specific characters based on their positions in each row. By appropriately adjusting the index j, the code ensures that the characters are appended to the oss object in the correct order, resulting in the desired ZigZag pattern.

Approach
Check for special cases:

If numRows is 1 or the length of the string s is less than or equal to numRows, return s as it is already in ZigZag form.
Create an ostringstream object, oss, to store the result ZigZag pattern.

Loop through each row from 0 to numRows - 1:

a. Initialize two variables, j and k, with the current row index value (i).

b. Append the character at index j in the input string s to the oss object.

c. Use two while loops to handle the two different types of characters in a ZigZag pattern:

- The first while loop: Increment `j` by `2 * (numRows - k - 1)`. This step skips the characters that appear in the middle of each ZigZag segment.

- The second while loop: Increment `j` by `2 * k`. This step skips the characters that appear at the edges of each ZigZag segment, except for the first and last rows.

- Repeat steps b and c until the index `j` goes beyond the length of the string `s`.
d. Move to the next row by incrementing the value of k.

After completing the loop, the oss object contains the ZigZag pattern of the input string s.

Return the ZigZag pattern as a string using oss.str().

Overall, the provided code traverses the input string s in a zigzag pattern and appends the characters to the oss object in a specific order to form the ZigZag pattern. It accounts for special cases where the input string is already in ZigZag form or has only one row. The time complexity of this approach is O(len * numRows), and the space complexity is O(numRows) due to the oss object.

Complexity
Time complexity:
The dominant factor in time complexity is the first while loop, which runs approximately len / (2 * (numRows - 1)) times.
Therefore, the overall time complexity of the convert function is O(len * numRows).

Space complexity:
The space complexity is mainly due to the oss object, which stores the result string. The size of the oss object depends on the size of the input string s and the number of rows (numRows). Ignoring the input string size, the space complexity is O(numRows) for the oss object.

Code
#C++

#include <string>
#include <sstream>

class Solution {
public:
    string convert(string s, int numRows) {
        if (numRows == 1 || s.size() <= numRows) {
            return s;
        }

        int len = s.size();
        int n = numRows;
        ostringstream oss;

        for (int i = 0; i < n; i++) {
            int j = i;
            int k = i;
            oss << s[j];
            while (j < len) {
                int diff = 2*(n-k-1);
                if (diff != 0) {
                    j = j + diff;
                    if (j < len) {
                        oss << s[j];
                    }
                }
                diff = 2 * k;
                if (diff != 0) {
                    j = j + diff;
                    if (j < len && k != 0) {
                        oss << s[j];
                    }
                }
            }
        }

        return oss.str();
    }
};
#Python

class Solution:
    def convert(self,s, numRows):
        if numRows == 1 or len(s) <= numRows:
            return s
        
        rows = [''] * numRows
        index, step = 0, 1
        
        for char in s:
            rows[index] += char
            
            if index == 0:
                step = 1
            elif index == numRows - 1:
                step = -1
            
            index += step
        
        return ''.join(rows)
#Java

class Solution {
    public String convert(String s, int numRows) {
        if (numRows == 1 || s.length() <= numRows) {
            return s;
        }
        
        StringBuilder[] rows = new StringBuilder[numRows];
        for (int i = 0; i < numRows; i++) {
            rows[i] = new StringBuilder();
        }
        
        int index = 0;
        int step = 1;
        
        for (char c : s.toCharArray()) {
            rows[index].append(c);
            
            if (index == 0) {
                step = 1;
            } else if (index == numRows - 1) {
                step = -1;
            }
            
            index += step;
        }
        
        StringBuilder result = new StringBuilder();
        for (StringBuilder row : rows) {
            result.append(row);
        }
        
        return result.toString();
    }
}
