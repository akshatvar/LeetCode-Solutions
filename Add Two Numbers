/*You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order,
and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.*/

//Solution

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {

    ListNode* addTwoNumberHelper(ListNode* l1, ListNode* l2,ListNode* head, ListNode* tail,int carry){
        if(l1==nullptr && l2==nullptr && carry==0){
            return head;
        }else if(l1==nullptr && l2==nullptr && carry!=0){
            ListNode* newNode = new ListNode(carry);
            tail->next = newNode;
            tail = newNode;
            return head;
        }
        int sum = 0;
        if(l1!=nullptr && l2!=nullptr)
            sum = l1->val + l2->val;
        else if(l1!=nullptr && l2==nullptr)
            sum = l1->val;
        else
            sum = l2->val;
        
        sum = sum+carry;
        if(sum>9){
            carry = sum/10;
            sum = sum%10;
        }else{
            carry = 0;
        }
        ListNode* newNode = new ListNode(sum);
        if(head==nullptr){
            head = newNode;
            tail = newNode;
        }else{
            tail->next = newNode;
            tail = newNode;
        }
        if(l1!=nullptr && l2==nullptr)
            return addTwoNumberHelper(l1->next,l2,head,tail,carry);
        else if(l1==nullptr && l2!=nullptr)
            return addTwoNumberHelper(l1,l2->next,head,tail,carry);
        else
            return addTwoNumberHelper(l1->next,l2->next,head,tail,carry);
    }

public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* ans = addTwoNumberHelper(l1,l2,nullptr,nullptr,0);

        return ans;
    }
};
