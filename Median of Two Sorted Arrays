/*Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106*/

//Solution

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        int m = nums2.size();
        if (n > m) {
            return findMedianSortedArrays(nums2, nums1);
        }
        int start = 0;
        int end = n;
        int partitionX;
        int partitionY;
        int maxLeftX, maxLeftY;
        int minRightX, minRightY;
        while (start <= end) {
            partitionX = (start + end) / 2;
            partitionY = (n + m + 1) / 2 - partitionX;
            maxLeftX = partitionX == 0 ? INT_MIN : nums1[partitionX - 1];
            minRightX = partitionX == n ? INT_MAX : nums1[partitionX];

            maxLeftY = partitionY == 0 ? INT_MIN : nums2[partitionY - 1];
            minRightY = partitionY == m ? INT_MAX : nums2[partitionY];

            if (maxLeftX <= minRightY && maxLeftY <= minRightX) {
                if ((m + n) % 2 == 0) {
                    return double(max(maxLeftX, maxLeftY) + min(minRightX, minRightY)) / 2;
                }
                else {
                    return double(max(maxLeftX, maxLeftY));
                }
            }
            else if (maxLeftX > minRightY) {
                end = partitionX - 1;
            }
            else {
                start = partitionX + 1;
            }
        }
        return 0.0; // Add a default return value to handle all possible code paths
    }
};
